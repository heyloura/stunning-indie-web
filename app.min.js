const byId = function(id) { return document.getElementById(id); }

const _app = {
    readonly: function () {
      if (_app.github.getPAT()) {
        return false;
      }
      return true;
    },
    sectionTypes: {
      post: "post",
    },
    postTypes: {
      note: "note",
      article: "article",
      like: "like",
      reply: "reply",
      bookmark: "bookmark",
      photo: "photo"
    },
    htmlIds: {
      hcardimg: 'configuration_indieweb_author_hcard_img',
      hcardname: 'configuration_indieweb_author_hcard_name',
      hcardnote: 'configuration_indieweb_hcard_note',
      githubPat: 'configuration_github_pat',
      githubBranch: 'configuration_github_branch',
      githubFileName: 'configuration_github_filename',
      githubPath: 'configuration_github_path',
      githubRepo: 'configuration_github_repository',
      postUrl: 'post-url',
      postName: 'post-name',
      postTags: 'post-tags',
      postDomain: 'post-domain',
      postTitle: 'post-title',
      editorOutput: 'editor-output',
      editorControls: 'editor-controls',
      postId: 'edit-post-id', 
      postTypes: 'post-types',
      settingsGithubPat: 'configuration_githubpat_settings',
      settingsGeneral: 'configuration_general_settings',
      settingsIndieWeb: 'configuration_indieweb_settings',
      settingsGIthubAutoSave: 'configuration_githubautosave_settings',
      filter: 'filter',
      filterText: 'filterText',
      removeFilterText: 'removeFilterText'
    },
    indieweb: {
      getMyImg: function() { return byId(_app.htmlIds.hcardimg).value },
      getMyName: function() { return byId(_app.htmlIds.hcardname).value },
    },
    github: {
      getPATInput: function () { return byId(_app.htmlIds.githubPat).value; },
      getPAT: function () { return localStorage.getItem("small-web-pat"); },
      getRepo: function() { return byId(_app.htmlIds.githubRepo).value; },
      getBranch: function () { return byId(_app.htmlIds.githubBranch).value; },
      getFileName: function () { return byId(_app.htmlIds.githubFileName).value; },
      getPath: function () { return byId(_app.htmlIds.githubPath).value; }
    },
    sectionIdLength: 6,
    alphabet: "23456789abdegjkmnpqrvwxyz", //https://www.tomspencer.dev/blog/2014/11/16/short-id-generation-in-javascript/
    post: {
      hide: function() 
      {
        byId(_app.htmlIds.postUrl).style.display = "none";
        document.querySelector(`[for='${_app.htmlIds.postUrl}']`).style.display = "none";
        byId(_app.htmlIds.postName).style.display = "none";
        document.querySelector(`[for='${_app.htmlIds.postName}']`).style.display = "none";
        byId(_app.htmlIds.postDomain).style.display = "none";
        document.querySelector(`[for='${_app.htmlIds.postDomain}']`).style.display = "none";
        byId(_app.htmlIds.postTitle).style.display = "none";
        document.querySelector(`[for='${_app.htmlIds.postTitle}']`).style.display = "none";
      },
      clear: function() {
        byId(_app.htmlIds.postUrl).value = '';
        byId(_app.htmlIds.postName).value = '';
        byId(_app.htmlIds.postTags).value = '';
        byId(_app.htmlIds.postDomain).value = '';
        byId(_app.htmlIds.postTitle).value = '';
        byId(_app.htmlIds.editorOutput).innerHTML = '';
        byId(_app.htmlIds.postId).value = '';
      },
      set: function(id, title, domain, url, name, tags, content) {
        byId(_app.htmlIds.postUrl).value = url;
        byId(_app.htmlIds.postName).value = name;
        byId(_app.htmlIds.postTags).value = tags;
        byId(_app.htmlIds.postDomain).value = domain;
        byId(_app.htmlIds.postTitle).value = title;
        byId(_app.htmlIds.editorOutput).innerHTML = content;
        byId(_app.htmlIds.postId).value = id;
      },
      getUrl: function() {
        return byId(_app.htmlIds.postUrl).value;
      },
      getName: function() {
        return byId(_app.htmlIds.postName).value;
      },
      getTags: function() {
        return byId(_app.htmlIds.postTags).value;
      },
      getDomain: function() {
        return byId(_app.htmlIds.postDomain).value;
      },
      getTitle: function() {
        return byId(_app.htmlIds.postTitle).value;
      },
      getPostType: function() {
        return document.querySelector(`input[name="${_app.htmlIds.postTypes}"]:checked`).value;
      },
      getPost: function() {
        return byId(_app.htmlIds.editorOutput).innerHTML;
      },
      getEditPostId: function () {
        return byId(_app.htmlIds.postId).value;
      },
      attributeIds: {
        type: 'data-type',
        postType: 'data-post-type',
        date: 'data-post-date',
        content: 'data-post-content',
        tags: 'data-post-tags',
        title: 'data-post-title',
        url: 'data-post-url',
        domain: 'data-post-domain',
        name: 'data-post-name',
        photo: 'data-post-has-photo'
      }
    }
  };
  
  Object.freeze(_app);
  Object.freeze(_app.sectionTypes);
  Object.freeze(_app.postTypes);
  Object.freeze(_app.indieweb);
  Object.freeze(_app.readonly);
  
  function logout() {
    localStorage.clear();
    location.reload();
  }
  
  function savePAT() {
    if (_app.github.getPATInput()) {
      localStorage.setItem("small-web-pat", _app.github.getPATInput());
    }
    location.reload();
  }

  function autoSave() { 
    byId(_app.htmlIds.editorControls).innerHTML = '';
    authDisplay(false);
    const url = `https://api.github.com/repos/${_app.github.getRepo()}/contents${_app.github.getPath()}${_app.github.getFileName()}?ref=${_app.github.getBranch()}`;
    let content = '<!DOCTYPE html>' + byId("html").outerHTML;
    let base64 = Base64.encode(content);
    authDisplay(true);
    
    // reinit controls
    Panagram.init({
      controls: "defaultControls",
      ctrElement: byId(_app.htmlIds.editorControls),
      outElement: byId(_app.htmlIds.editorOutput),
    });
  
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.setRequestHeader("Authorization", "Bearer " + _app.github.getPAT());
    xhr.onreadystatechange = function () {
      if (xhr.readyState == XMLHttpRequest.DONE) {
        var data = JSON.parse(xhr.responseText);
        
        if (data.message && data.message === "Not Found") {
          alert('Could not find: ' + url);
          return;
        }

        if(data.sha) { 
          let commit = {
            message: 'Checking auto save config',
            content: base64,
            sha: data.sha,
            branch: _app.github.getBranch()
          }
          
          const xhrSave = new XMLHttpRequest();
          xhrSave.open("PUT", url, true);
          xhrSave.setRequestHeader("Authorization", "Bearer " + _app.github.getPAT());
          xhrSave.setRequestHeader("Content-Type", "application/vnd.github+json");
          xhrSave.onreadystatechange = function () {
            if (xhrSave.readyState == XMLHttpRequest.DONE) {
              var data = JSON.parse(xhrSave.responseText);
              if(!data.commit){
                alert('Something went wrong ...');
                // maybe we could send webmentions here, if needed
              }
              alert('Page changes have been pushed to Github.');
            }
          };
          xhrSave.send(JSON.stringify(commit));       
        }
      }
    };
    xhr.send();
  }
  
  // This function should only be used to generate section ids
  function generateSectionId() {
    var id = "";
    for (var i = 0; i < _app.sectionIdLength; i++) {
      id += _app.alphabet.charAt(
        Math.floor(Math.random() * _app.alphabet.length)
      );
    }
  
    var sections = document.querySelectorAll("section");
    sections.forEach(function (item, index, arr) {
      let sectionId = item.getAttribute("id");
      if (sectionId === id) {
        console.log("Duplicate alert, trying again");
        return generateSectionId();
      }
    });
  
    return id;
  }

  function filterResults(filter) {
    byId(_app.htmlIds.filterText).innerHTML = filter;
    byId(_app.htmlIds.filter).style.display = 'block';
    console.log('filtering');
    loadPostType(window.location.hash.slice(1));
  }

  function generatePostFooter(created, hasPhoto, actionName, actionType, id, type) {
    let dateTime = new Date(created).toISOString();
    let dateTimeDisp = new Date(created).toLocaleString("en-US", { weekday: "long", year: "numeric", month: "long", day: "numeric", });
    let tags = _app.post.getTags(); 
    let tagsDisp = '';
    if(tags) {
      let tagsArr = tags.split(' ');
      tagsDisp = `| 🏷️ <span class="p-category">`;
      tagsArr.forEach(function(tag, index){
        tagsDisp += `<a onclick="filterResults('${tag}')" href="javascript:void(0)">${tag}</a>`;       
        if(index != tagsArr.length - 1){
          tagsDisp += ',&nbsp;';
        }
      });
      tagsDisp += '</span>';
    }
  
    let actionLink = `<a href='#${type}'>${actionType}</a>`;
    
    return `<div class="e-content-footer">
      ${actionName} on <a href="#${id}" class="u-url p-name">
      <time class="dt-published" datetime="${dateTime}">${dateTimeDisp}</time>
      </a> | ${actionLink} ${
      hasPhoto ? "<a href='#photo'>📷 photo</a>" : ""
      } ${tagsDisp}
    </div>`;
  }
  
  function generatePostHTML(html, type, id, created) {
    let hasPhoto = false;
  
    if (html.includes("<img")) {
      var parts = html.split("<img");
      parts.forEach((element, index) => {
        if (index === 0) {
          html = element;
        } else {
          html += '<img class="u-photo" ' + element;
        }
      });
      hasPhoto = true;
    }
  
    const authorDisp = `<a class="p-author h-card" rel="author" href="/">
          <img src="${_app.indieweb.getMyImg()}" class="u-photo"> 
          <span class="p-name">${_app.indieweb.getMyName()}</span>
        </a>`;
  
    // if(type === 'article')
    // {
    //   title = `<a href="#${id}" class="u-url p-name">${byId('create-post-title').value}</a>`;
    //   summary = ``;
    // }
  
    if (type === "reply") {
      const title = `in repy to <a href="${_app.post.getUrl()}" class="u-in-reply-to">${_app.post.getName()}</a>`;
      const footer = generatePostFooter(created, hasPhoto, 'replied', '💬 reply', id, _app.postTypes.reply);

      return `<article class="h-entry">${authorDisp}${title}
        <div class="e-content p-content">               
          ${html}${footer}
        </div>    
        </article>`;
    }
  
    if (type === "like") {
      const footer = generatePostFooter(created, hasPhoto, 'liked', '👍 like', id, _app.postTypes.like);
      return `<div class="h-entry">
        <div class="h-cite u-like-of">
            Liked <a class="u-url" href="${_app.post.getUrl()}">a post</a> by
            <span class="p-author h-card">
            <a class="u-url p-name" href="${_app.post.getDomain()}">${_app.post.getName()}</a>
            </span>:
            <blockquote class="e-content">
                ${html}
            </blockquote>
            ${footer}
        </div>
        </div>`;
    }
  
    if (type === "bookmark") {
      const footer = generatePostFooter(created, hasPhoto, 'bookmarked', '🔖 bookmark', id, _app.postTypes.bookmark);
      return `<div class="h-entry">${authorDisp}
          <a class="u-bookmark-of h-cite" href="${_app.post.getUrl()}">
            ${_app.post.getTitle()}
          </a>
          ${html}${footer}
        </div>`;
    }
  
    // default is a note
    const footer = generatePostFooter(created, hasPhoto, 'published', '📔 note', id, _app.postTypes.note);
    return `<article class="h-entry">${authorDisp}
        <div class="e-content p-content">               
            ${html}${footer}
        </div>    
        </article>`;
  }
  
  function post() {
    const create = new Date();
    const type = _app.post.getPostType();
    const id = generateSectionId();  
    const html = _app.post.getPost();
    const hasPhoto = html.includes('📷 photo');
    const html64 = Base64.encode(html);
    const urlHash = `/${create.getFullYear()}/${create.getMonth() + 1}/${create.getDate()}/${type}/${id}`;
    let section = document.createElement("section");
    const editId = _app.post.getEditPostId();
    if (editId) {
      section.setAttribute("id", editId);
    } else {
      section.setAttribute("id", urlHash);
    }
  
    section.setAttribute(_app.post.attributeIds.type, _app.sectionTypes.post);
    section.setAttribute(_app.post.attributeIds.postType, type);
    section.setAttribute(_app.post.attributeIds.date, create.getTime());
    section.setAttribute(_app.post.attributeIds.content, html64);
    section.setAttribute(_app.post.attributeIds.tags, _app.post.getTags().trim());
    section.setAttribute(_app.post.attributeIds.title, _app.post.getTitle());
    section.setAttribute(_app.post.attributeIds.url, _app.post.getUrl());
    section.setAttribute(_app.post.attributeIds.domain, _app.post.getDomain());
    section.setAttribute(_app.post.attributeIds.name, _app.post.getName());
    section.setAttribute(_app.post.attributeIds.photo, hasPhoto);
  
    let content = document.createElement("div");
    content.setAttribute("id", (editId ? editId : urlHash) + "-content");
    content.innerHTML = generatePostHTML(html, type, editId ? editId : urlHash, create.getTime());
    section.prepend(content);
  
    let edit = document.createElement("a");
    edit.setAttribute("class", "logged-in");
    //edit.style.display = _app.readonly() ? "none" : "block";
    edit.style.float = "right";
    edit.setAttribute("href", "javascript:void(0)");
    edit.innerHTML = "✏️ edit";
    edit.setAttribute("onclick", `edit('${editId ? editId : urlHash}')`);
    section.prepend(edit);
    
    let deleteMe = document.createElement("a");
    deleteMe.setAttribute("class", "logged-in");
    //deleteMe.style.display = _app.readonly() ? "none" : "block";
    deleteMe.style.float = "right";
    deleteMe.style.marginLeft = "0.5em";
    deleteMe.setAttribute("href", "javascript:void(0)");
    deleteMe.innerHTML = "💣 delete";
    deleteMe.setAttribute("onclick", `deleteMe('${editId ? editId : urlHash}')`);
    section.prepend(deleteMe);
  
    let main = byId("main");
    if (editId) {
      byId(editId).remove();
    }
    main.prepend(section);

    // how can we save and then send webmentions here?
    // and make sure the changes are live on the website?
    _app.post.clear();
    autoSave();
  
    window.location.hash = "stream";
  }
  
  function edit(id) {
    const postEl = byId(id); 
    byId("post-button").innerHTML = "Save Changes";
  
    if (postEl) {
      const post64 = postEl.getAttribute(_app.post.attributeIds.content);
      const content = Base64.decode(post64);
      const title = postEl.getAttribute(_app.post.attributeIds.title);
      const domain = postEl.getAttribute(_app.post.attributeIds.domain);
      const url = postEl.getAttribute(_app.post.attributeIds.url);
      const name = postEl.getAttribute(_app.post.attributeIds.name);
      const tags = postEl.getAttribute(_app.post.attributeIds.tags);
      _app.post.set(id, title, domain, url, name, tags, content);
    }

    window.location.hash = "post";
  }

  function deleteMe(id) {
    if(confirm("Are you sure you want to delete this?")) {
      byId(id).remove(); 
      window.location.hash = "stream";
    }
  }

  function loadPostType(type) {
    // clean the DOM
    let posts = byId(type);
    posts.innerHTML = "";
    
    let filterTextEl = byId(_app.htmlIds.filterText);
    let tagAttribute = filterTextEl.innerHTML ? `[${_app.post.attributeIds.tags}~=${filterTextEl.innerHTML}]` : '';

    let sections = null;    
    if(type === _app.postTypes.photo )
    {
      sections = document.querySelectorAll(`section[${_app.post.attributeIds.photo}='true'][${_app.post.attributeIds.date}]${tagAttribute}`); 
    }
    else if (type === "stream")
    {
      sections = document.querySelectorAll(`section[${_app.post.attributeIds.type}='${_app.sectionTypes.post}'][${_app.post.attributeIds.date}]${tagAttribute}`);
    } 
    else
    {
      sections = document.querySelectorAll(`section[${_app.post.attributeIds.postType}='${type}'][${_app.post.attributeIds.date}]${tagAttribute}`); 
    }

    // get the sections and sort them
    if (sections != null && sections != undefined && sections.length > 0) {
      [].slice.call(sections).sort(function (a, b) {
        return new Date(a.getAttribute(_app.post.attributeIds.date)) >
          new Date(b.getAttribute(_app.post.attributeIds.date))
          ? 1
          : new Date(b.getAttribute(_app.post.attributeIds.date)) >
            a.getAttribute(_app.post.attributeIds.date)
          ? -1
          : 0;
      });
  
      // add them to the DOM
      sections.forEach((section) => {
        let id = section.getAttribute("id");
        let content = byId(id + "-content");
  
        if (content != null && content != undefined) {
          let clone = content.cloneNode(true);
          let children = clone.childNodes;
          [].slice.call(children).forEach((child) => posts.append(child));
        }
      });
    }
  }

  let authDisplay = function(show) {
    let authBtns = document.getElementsByClassName("logged-in");
    [].slice.call(authBtns).forEach((btn) => {
      if(show) 
      {
        btn.style.display = "inline-block";
      }
      else
      {
        btn.style.display = null;
      }  
    });
    
    _app.post.hide();
  }
  
  //  --------------------- DOM LOADED ------------
  //  Set up event listeners
  //  ---------------------------------------------
  document.addEventListener("DOMContentLoaded", function () {  
    let id = window.location.hash.slice(1);
  
    //  ---------------------- INITALIZE ------------
    // Redirect to the stream on load unless this
    // page came from a #page
    //  ---------------------------------------------
    var page = window.location.href.replace(/^https?:\/\//, "");
    if (
      window.location.host === page ||
      window.location.host + "/" === page ||
      window.location.host + "/index.html" === page
    ) {
      window.location.hash = "stream";
    }
    if (window.location.hash === "#stream") {
      loadPostType('stream') 
    }
    
    let filterRemoveEl = byId(_app.htmlIds.removeFilterText);
    filterRemoveEl.addEventListener("click", function (e) {
      byId(_app.htmlIds.filterText).innerHTML = '';
      byId(_app.htmlIds.filter).style.display = 'none';
      loadPostType(window.location.hash.slice(1));
    });
    
  
    //  ------------------- AUTHENTICATED ------------
    //  Check if the user has a PAT and show buttons
    //  Authorization is checked when the Github PAT
    //  is checked for trying to save changes.
    //  ---------------------------------------------
    console.log(_app.readonly());
    if (!_app.readonly()) {
      authDisplay(true);
  
      document
        .querySelectorAll(`input[name=${_app.htmlIds.postTypes}]`)
        .forEach((input) =>
          input.addEventListener("click", function (e) {
            // rehide them
            _app.post.hide();
        
            // decide which ones to show again
            if (e.target && e.target.matches("input[type='radio']")) {
              if (e.target.value === "reply") {
                byId(_app.htmlIds.postUrl).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postUrl}']`).style.display = "block";
                byId(_app.htmlIds.postName).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postName}']`).style.display = "block";
              }
              if (e.target.value === "like") {
                byId(_app.htmlIds.postUrl).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postUrl}']`).style.display = "block";
                byId(_app.htmlIds.postName).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postName}']`).style.display = "block";
                byId(_app.htmlIds.postDomain).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postDomain}']`).style.display = "block";
              }
              if (e.target.value === "bookmark") {
                byId(_app.htmlIds.postUrl).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postUrl}']`).style.display = "block";
                byId(_app.htmlIds.postTitle).style.display = "block";
                document.querySelector(`[for='${_app.htmlIds.postTitle}']`).style.display = "block";
              }
            }
          })
        );
  
      // make sure they are hidden on load
      _app.post.hide();
    } else {
      // remove the settings areas
      byId(_app.htmlIds.settingsGeneral).remove();
      byId(_app.htmlIds.settingsIndieWeb).remove();
      byId('configuration_githubautosave_settings').remove();
      let authBtns = document.getElementsByClassName("logged-in");
      [].slice.call(authBtns).forEach((btn) => {
        btn.style.display = "none";
      });
    }
  
    // ----------------------- SPA ENGINE ----------
    //  mostly handled by css, but we do keep
    //  track of the current location.hash
    //  and load/destroy editors based off of it.
    //  ---------------------------------------------
    function locationHashChanged() {
      id = window.location.hash.slice(1);
  
      // if they're navigation to a core page ... load it
      if (id === "stream") {
        loadPostType('stream'); 
      }
      if (id === _app.postTypes.note ||
         id === _app.postTypes.reply ||
         id === _app.postTypes.like ||
         id === _app.postTypes.bookmark ||
         id === _app.postTypes.photo) {
        loadPostType(id);
      }
      
      if (id === "post" && !_app.post.getEditPostId()) {
        byId("post-button").innerHTML = "Post it!";
        _app.post.clear();
      }
      
      window.scrollTo(0, 0);
    }
    window.onhashchange = locationHashChanged;
  
    // --------------------- CONFIGURATION ----------
    //  Keep the DOM refreshed with configuration
    //  changes
    // _---------------------------------------------
    document.querySelectorAll("input.config").forEach((input) =>
      input.addEventListener("input", function () {
        this.setAttribute("value", this.value);
  
        if (this.getAttribute("id") === _app.htmlIds.hcardname) {
          byId("hcard_name").innerHTML = this.value;
        }
        if (this.getAttribute("id") === _app.htmlIds.hcardnote) {
          byId("hcard_note").innerHTML = this.value;
        }
        if (this.getAttribute("id") === _app.htmlIds.hcardimg) {
          byId("hcard_img").src = this.value;
        }
        if (this.getAttribute("id") === "configuration_site_name") {
          byId("site_name").innerHTML = this.value;
        }
        if (this.getAttribute("id") === "configuration_indieauth_email") {
          var element = byId("indieauth-email");
          if (element) {
            if (this.value) {
              element.setAttribute("href", `mailto:${this.value}`);
              element.innerHTML = "📧 " + this.value;
            } else {
              element.remove();
            }
          } else {
            if (this.value) {
              let anchor = document.createElement("a");
              anchor.setAttribute("id", "indieauth-email");
              anchor.setAttribute("rel", "me");
              anchor.setAttribute("href", `mailto:${this.value}`);
              anchor.style.display = 'block';
              anchor.style.textAlign = 'center';
              anchor.innerHTML = "📧 " + this.value;
  
              var profile = byId("profile");
              profile.append(anchor);
            }
          }
        }
      })
    );

    // --------------------- EDITOR ------ ----------
    //  Set up the editor
    // _---------------------------------------------
    Panagram.init({
        controls: "defaultControls",
        ctrElement: byId(_app.htmlIds.editorControls),
        outElement: byId(_app.htmlIds.editorOutput),
      });
    
    const editor = byId(_app.htmlIds.editorOutput)
    editor.addEventListener("paste", (e) => {
      e.preventDefault();
      const text = e.clipboardData.getData('text/plain');
      document.execCommand("insertHTML", false, text);
    });

  }); // End DOM load steps
