const byId = function(id) { return document.getElementById(id); }
const bySel = function(selector) { return document.querySelector(selector); }
const bySelAll = function(selector) { return document.querySelectorAll(selector); }
const byIdValue = function(id) { return DOMPurify.sanitize(byId(id).value); }
const dispBlock = function(el) { el.style.display = "block"; }
const dispNone= function(el) { el.style.display = "none"; }

const _app = {
    readonly: function () {
      if (_app.github.getPAT()) {
        return false;
      }
      return true;
    },
    cleanId: function () {
        return DOMPurify.sanitize(window.location.hash.slice(1));
    },
    sectionTypes: {
      post: "post",
    },
    postTypes: {
      note: "note",
      article: "article",
      like: "like",
      reply: "reply",
      bookmark: "bookmark",
      photo: "photo"
    },
    htmlIds: {
      hcardimg: 'configuration_indieweb_author_hcard_img',
      hcardname: 'configuration_indieweb_author_hcard_name',
      hcardnote: 'configuration_indieweb_hcard_note',
      githubPat: 'configuration_github_pat',
      githubBranch: 'configuration_github_branch',
      githubFileName: 'configuration_github_filename',
      githubPath: 'configuration_github_path',
      githubRepo: 'configuration_github_repository',
      githubAutoSaveSetting: 'configuration_githubautosave_settings',
      postUrl: 'post-url',
      postName: 'post-name',
      postTags: 'post-tags',
      postDomain: 'post-domain',
      postTitle: 'post-title',
      postSummary: 'post-summary',
      postCreated: 'post-created',
      editorOutput: 'editor-output',
      editorControls: 'editor-controls',
      postId: 'edit-post-id', 
      postTypes: 'post-types',
      settingsGithubPat: 'configuration_githubpat_settings',
      settingsGeneral: 'configuration_general_settings',
      settingsIndieWeb: 'configuration_indieweb_settings',
      settingsGIthubAutoSave: 'configuration_githubautosave_settings',
      filter: 'filter',
      filterText: 'filterText',
      removeFilterText: 'removeFilterText',
      index: 'index',
      streamCount: 'configuration_stream_count'
    },
    indieweb: {
      getMyImg: function() { return byIdValue(_app.htmlIds.hcardimg) },
      getMyName: function() { return byIdValue(_app.htmlIds.hcardname) },
    },
    github: {
      getPATInput: function () { return byIdValue(_app.htmlIds.githubPat); },
      getPAT: function () { return localStorage.getItem("small-web-pat"); },
      getRepo: function() { return byIdValue(_app.htmlIds.githubRepo); },
      getBranch: function () { return byIdValue(_app.htmlIds.githubBranch); },
      getFileName: function () { return byIdValue(_app.htmlIds.githubFileName); },
      getPath: function () { return byIdValue(_app.htmlIds.githubPath); }
    },
    sectionIdLength: 6,
    alphabet: "23456789abdegjkmnpqrvwxyz", //https://www.tomspencer.dev/blog/2014/11/16/short-id-generation-in-javascript/
    post: {
      toggleInputs: function(type) {
        if (type === _app.postTypes.reply) {
          dispBlock(byId(_app.htmlIds.postUrl));
          dispBlock(bySel(`[for='${_app.htmlIds.postUrl}']`));
          dispBlock(byId(_app.htmlIds.postName));
          dispBlock(bySel(`[for='${_app.htmlIds.postName}']`));
        }
        if (type === _app.postTypes.like) {
          dispBlock(byId(_app.htmlIds.postUrl));
          dispBlock(bySel(`[for='${_app.htmlIds.postUrl}']`))
          dispBlock(byId(_app.htmlIds.postName));
          dispBlock(bySel(`[for='${_app.htmlIds.postName}']`));
          dispBlock(byId(_app.htmlIds.postDomain));
          dispBlock(bySel(`[for='${_app.htmlIds.postDomain}']`));
        }
        if (type === _app.postTypes.bookmark) {
          dispBlock(byId(_app.htmlIds.postUrl));
          dispBlock(bySel(`[for='${_app.htmlIds.postUrl}']`));
          dispBlock(byId(_app.htmlIds.postTitle));
          dispBlock(bySel(`[for='${_app.htmlIds.postTitle}']`));
        }
        if (type === _app.postTypes.article) {
          dispBlock(byId(_app.htmlIds.postTitle));
          dispBlock(byId(_app.htmlIds.postSummary));
          dispBlock(bySel(`[for='${_app.htmlIds.postTitle}']`));
          dispBlock(bySel(`[for='${_app.htmlIds.postSummary}']`));
        }
      },
      hide: function() 
      {
        dispNone(byId(_app.htmlIds.postUrl));
        dispNone(bySel(`[for='${_app.htmlIds.postUrl}']`));
        dispNone(byId(_app.htmlIds.postName));
        dispNone(bySel(`[for='${_app.htmlIds.postName}']`));
        dispNone(byId(_app.htmlIds.postDomain));
        dispNone(bySel(`[for='${_app.htmlIds.postDomain}']`));
        dispNone(byId(_app.htmlIds.postTitle));
        dispNone(bySel(`[for='${_app.htmlIds.postTitle}']`));
        dispNone(byId(_app.htmlIds.postSummary));
        dispNone(bySel(`[for='${_app.htmlIds.postSummary}']`));
      },
      clear: function() {
        byId(_app.htmlIds.postUrl).value = '';
        byId(_app.htmlIds.postName).value = '';
        byId(_app.htmlIds.postTags).value = '';
        byId(_app.htmlIds.postDomain).value = '';
        byId(_app.htmlIds.postTitle).value = '';
        byId(_app.htmlIds.postSummary).value = '';
        byId(_app.htmlIds.editorOutput).innerHTML = '';
        byId(_app.htmlIds.postId).value = '';
        byId(_app.htmlIds.postCreated).value = '';
      },
      set: function(id, title, domain, url, name, tags, content, created, type, summary) {
        byId(_app.htmlIds.postUrl).value = url;
        byId(_app.htmlIds.postName).value = name;
        byId(_app.htmlIds.postTags).value = tags;
        byId(_app.htmlIds.postDomain).value = domain;
        byId(_app.htmlIds.postTitle).value = title;
        byId(_app.htmlIds.postSummary).value = summary;
        byId(_app.htmlIds.editorOutput).innerHTML = content;
        byId(_app.htmlIds.postId).value = id;
        byId(_app.htmlIds.postCreated).value = created;
        bySel(`input[name="${_app.htmlIds.postTypes}"][value="${type}"]`).checked = true;
        _app.post.toggleInputs(type);
      },
      getCreated: function() {
        return byIdValue(_app.htmlIds.postCreated);
      },
      getUrl: function() {
        return byIdValue(_app.htmlIds.postUrl);
      },
      getName: function() {
        return byIdValue(_app.htmlIds.postName);
      },
      getTags: function() {
        return byIdValue(_app.htmlIds.postTags);
      },
      getDomain: function() {
        return byIdValue(_app.htmlIds.postDomain);
      },
      getTitle: function() {
        return byIdValue(_app.htmlIds.postTitle);
      },
      getSummary: function() {
        return byIdValue(_app.htmlIds.postSummary);
      },
      getPostType: function() {
        return bySel(`input[name="${_app.htmlIds.postTypes}"]:checked`).value;
      },
      getPost: function() {
        return byId(_app.htmlIds.editorOutput).innerHTML;
      },
      getEditPostId: function () {
        return byIdValue(_app.htmlIds.postId);
      },
      attributeIds: {
        type: 'data-type',
        postType: 'data-post-type',
        date: 'data-post-date',
        update: 'data-post-update',
        content: 'data-post-content',
        tags: 'data-post-tags',
        title: 'data-post-title',
        url: 'data-post-url',
        domain: 'data-post-domain',
        name: 'data-post-name',
        photo: 'data-post-has-photo',
        summary: 'data-post-summary'
      }
    }
  };

//https://gomakethings.com/a-native-vanilla-javascript-way-to-get-the-closest-matching-parent-element/

  Object.freeze(_app.readonly);
  Object.freeze(_app.cleanId);
  
  function logout() {
    localStorage.clear();
    location.reload();
  }
  
  function savePAT() {
    if (_app.github.getPATInput()) {
      localStorage.setItem("small-web-pat", _app.github.getPATInput());
    }
    location.reload();
  }

  function autoSave() { 
    if(byIdValue(_app.htmlIds.githubRepo)) {
      byId(_app.htmlIds.editorControls).innerHTML = '';
      
      authDisplay(false);
      const url = `https://api.github.com/repos/${_app.github.getRepo()}/contents${_app.github.getPath()}${_app.github.getFileName()}?ref=${_app.github.getBranch()}`;
      let content = '<!DOCTYPE html>' + byId("html").outerHTML;
      let base64 = Base64.encode(content);
      authDisplay(true);

      // reinit controls
      Panagram.init({
        controls: "defaultControls",
        ctrElement: byId(_app.htmlIds.editorControls),
        outElement: byId(_app.htmlIds.editorOutput),
      });

      const xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.setRequestHeader("Authorization", "Bearer " + _app.github.getPAT());
      xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
          var data = JSON.parse(xhr.responseText);

          if (data.message && data.message === "Not Found") {
            alert('Could not find: ' + url);
            return;
          }

          if(data.sha) { 
            let commit = {
              message: 'Checking auto save config',
              content: base64,
              sha: data.sha,
              branch: _app.github.getBranch()
            }

            const xhrSave = new XMLHttpRequest();
            xhrSave.open("PUT", url, true);
            xhrSave.setRequestHeader("Authorization", "Bearer " + _app.github.getPAT());
            xhrSave.setRequestHeader("Content-Type", "application/vnd.github+json");
            xhrSave.onreadystatechange = function () {
              if (xhrSave.readyState == XMLHttpRequest.DONE) {
                var data = JSON.parse(xhrSave.responseText);
                if(!data.commit){
                  alert('Something went wrong ...');
                  // maybe we could send webmentions here, if needed
                }
                alert('Page changes have been pushed to Github.');
              }
            };
            xhrSave.send(JSON.stringify(commit));       
          }
        }
      };
      xhr.send();   
    }
    else
    {
      alert('Autosave is not configured');
    }

  }
  
  // This function should only be used to generate section ids
  function generateSectionId() {
    var id = "";
    for (var i = 0; i < _app.sectionIdLength; i++) {
      id += _app.alphabet.charAt(
        Math.floor(Math.random() * _app.alphabet.length)
      );
    }
  
    var sections = bySelAll("section");
    sections.forEach(function (item, index, arr) {
      let sectionId = item.getAttribute("id");
      if (sectionId === id) {
        console.log("Duplicate alert, trying again");
        return generateSectionId();
      }
    });
  
    return id;
  }

  function filterResults(filter) {
    byId(_app.htmlIds.filterText).innerHTML = DOMPurify.sanitize(filter);
    dispBlock(byId(_app.htmlIds.filter));
    loadPostType(_app.cleanId());
  }

  function generatePostFooter(hasPhoto, actionType, id, type) {
    let tags = _app.post.getTags(); 
    let tagsDisp = '';
    if(tags) {
      let tagsArr = tags.split(' ');
      tagsDisp = `| 🏷️ <span class="p-category">`;
      tagsArr.forEach(function(tag, index){
        tagsDisp += `<a onclick="filterResults('${tag}')" href="javascript:void(0)">${tag}</a>`;       
        if(index != tagsArr.length - 1){
          tagsDisp += ',&nbsp;';
        }
      });
      tagsDisp += '</span>';
    }
  
    let actionLink = `<a href='#${type}'>${actionType}</a>`;
    
    return `<div class="article-actions">${actionLink} ${
      hasPhoto ? "<a href='#photo'>📷 photo</a>" : ""
      } ${tagsDisp}
    </div>`;
  }
  
  function generatePostHTML(html, type, id, created, updated) {
    let hasPhoto = false;
  
    if (html.includes("<img")) {
      var parts = html.split("<img");
      parts.forEach((element, index) => {
        if (index === 0) {
          html = element;
        } else {
          html += '<img class="u-photo" ' + element;
        }
      });
      hasPhoto = true;
    }
    
    const dateOptions = { weekday: "long", year: "numeric", month: "long", day: "numeric", };
    const dateTime = new Date(parseInt(created)).toISOString();
    const dateTimeDisp = new Date(parseInt(created)).toLocaleString("en-US", dateOptions);
    let updatedDisp = '';
    if(updated){
      updatedDisp = `updated on <time class="dt-published" datetime="${new Date(updated).toISOString()}">${new Date(updated).toLocaleString("en-US", dateOptions)}</time>`;
    }
    
    const authorDisp = `<a class="p-author h-card" rel="author" href="/">
          <img src="${_app.indieweb.getMyImg()}" class="u-photo"> 
          <span class="p-name">${_app.indieweb.getMyName()}</span>
        </a>`;
    
    const publishedDisp = `<a href="#${id}" class="u-url p-name">
          <time class="dt-published" datetime="${dateTime}">${dateTimeDisp}</time>       
          </a><br/><small>${updatedDisp}</small>`; 
  
    if (type === "reply") {
      const title = `in repy to <a href="${_app.post.getUrl()}" class="u-in-reply-to">${_app.post.getName()}</a>`;
      const footer = generatePostFooter(hasPhoto, '💬 reply', id, _app.postTypes.reply);

      return {
        title: `Replied to ${_app.post.getName()}`,
        body: `<article class="h-entry">
        <div class="title">${authorDisp}${title}</div>
        <div class="e-content p-content">               
          ${html}<div class="e-content-footer">
          replied on ${publishedDisp}</div>
        </div> 
        ${footer}
        </article>`
      };
    }
  
    if (type === "like") {
      const footer = generatePostFooter(hasPhoto, '👍 like', id, _app.postTypes.like);
      return {
        title: `Liked a post by ${_app.post.getName()}`,
        body: `<div class="h-entry">
        <div class="h-cite u-like-of">
          <div class="title">Liked <a class="u-url" href="${_app.post.getUrl()}">a post</a> by
            <span class="p-author h-card liked-name">
            <a class="u-url p-name" href="${_app.post.getDomain()}">${_app.post.getName()}</a>
            </span>:</div>
            <blockquote class="e-content">
                ${html}
            </blockquote>
            <div class="e-content-footer">liked on ${publishedDisp}</div>    
        </div>
        ${footer}
        </div>`
      };
    }
  
    if (type === "bookmark") {
      const footer = generatePostFooter(hasPhoto, '🔖 bookmark', id, _app.postTypes.bookmark);
      return {
        title: `Bookmarked ${_app.post.getTitle()}`,
        body: `<div class="h-entry">${authorDisp}
          ⧉ <a class="u-bookmark-of h-cite title" href="${_app.post.getUrl()}">
            ${_app.post.getTitle()}
          </a>
          ${html}
          <div class="e-content-footer">
          bookmarked on ${publishedDisp}</div>
          ${footer}
        </div>`
      };
    }
    
    if (type === "article") {
      const footer = generatePostFooter(hasPhoto, '📃 article', id, _app.postTypes.article);
      return {
        title: `${_app.post.getTitle()}`,
        body: `<div class="h-entry">
          <h1 class="title"><a href="#${id}" class="p-name">${_app.post.getTitle()}</a></h1>
          ${authorDisp}
          <p class="p-summary">${_app.post.getSummary()}</p>
          <div class="e-content">${html}</div>
          <div class="e-content-footer">
          published on ${publishedDisp}</div>
          ${footer}
        </div>`
      };
    }
  
    // default is a note
    const footer = generatePostFooter(hasPhoto, '📔 note', id, _app.postTypes.note);
    return {
        title: `Note on ${dateTimeDisp}`,
        body: `<article class="h-entry">
          ${authorDisp}
          <div class="e-content">               
              ${html}     
          </div> 
          <div class="e-content-footer">
          published on ${publishedDisp}</div>
          ${footer}
          </article>`
      };
  }
  
  function post() {
    const create = new Date();
    const type = _app.post.getPostType();
    const id = generateSectionId();  
    const html = DOMPurify.sanitize(_app.post.getPost());
    const hasPhoto = html.includes('📷 photo');
    const html64 = Base64.encode(html);
    const urlHash = `/${create.getFullYear()}/${create.getMonth() + 1}/${create.getDate()}/${type}/${id}`;
    let section = document.createElement("section");
    const editId = _app.post.getEditPostId();
    if (editId) {
      section.setAttribute("id", editId);
    } else {
      section.setAttribute("id", urlHash);
    }
  
    section.setAttribute(_app.post.attributeIds.type, _app.sectionTypes.post);
    section.setAttribute(_app.post.attributeIds.postType, type);    
    if(editId) 
    {
      section.setAttribute(_app.post.attributeIds.update, create.getTime());
      section.setAttribute(_app.post.attributeIds.date, _app.post.getCreated());
    }
    else
    {
      section.setAttribute(_app.post.attributeIds.date, create.getTime());
    }
    section.setAttribute(_app.post.attributeIds.content, html64);
    section.setAttribute(_app.post.attributeIds.tags, _app.post.getTags().trim());
    section.setAttribute(_app.post.attributeIds.title, _app.post.getTitle());
    section.setAttribute(_app.post.attributeIds.summary, _app.post.getSummary());
    section.setAttribute(_app.post.attributeIds.url, _app.post.getUrl());
    section.setAttribute(_app.post.attributeIds.domain, _app.post.getDomain());
    section.setAttribute(_app.post.attributeIds.name, _app.post.getName());
    section.setAttribute(_app.post.attributeIds.photo, hasPhoto);
  
    let content = document.createElement("div");
    content.setAttribute("id", (editId ? editId : urlHash) + "-content");
    
    const data = generatePostHTML(html, type, 
                                         editId ? editId : urlHash, 
                                         editId ? _app.post.getCreated() : create.getTime(),
                                         editId ? create.getTime() : null);
    content.innerHTML = data.body;
    section.prepend(content);
  
    let edit = document.createElement("a");
    edit.setAttribute("class", "logged-in");
    edit.style.float = "right";
    edit.setAttribute("href", "javascript:void(0)");
    edit.innerHTML = "✏️ edit";
    edit.setAttribute("onclick", `edit('${editId ? editId : urlHash}')`);
    section.prepend(edit);
    
    let deleteMe = document.createElement("a");
    deleteMe.setAttribute("class", "logged-in");
    deleteMe.style.float = "right";
    deleteMe.style.marginLeft = "0.5em";
    deleteMe.setAttribute("href", "javascript:void(0)");
    deleteMe.innerHTML = "💣 delete";
    deleteMe.setAttribute("onclick", `deleteMe('${editId ? editId : urlHash}')`);
    section.prepend(deleteMe);
  
    let main = byId("main");
    if (editId) {
      byId(editId).remove();
    }
    main.prepend(section);
    
    //create the index page
    if(!editId)
    {
      let p = document.createElement("p");
      let pLink = document.createElement("a");
      pLink.setAttribute("href", '#' + urlHash);
      pLink.innerHTML = `${byId(_app.htmlIds.index).childNodes.length + 1}. ${data.title}`;
      p.prepend(pLink);
      byId(_app.htmlIds.index).prepend(p);
    }

    // how can we save and then send webmentions here?
    // and make sure the changes are live on the website?
    _app.post.clear();
    byId("stream").innerHTML = "";
    autoSave();
  
    window.location.hash = "stream";
  }
  
  function edit(id) {
    const postEl = byId(id); 
    byId("post-button").innerHTML = "Save Changes";
  
    if (postEl) {
      const post64 = postEl.getAttribute(_app.post.attributeIds.content);
      const content = Base64.decode(post64);
      const title = postEl.getAttribute(_app.post.attributeIds.title);
      const summary = postEl.getAttribute(_app.post.attributeIds.summary);
      const domain = postEl.getAttribute(_app.post.attributeIds.domain);
      const url = postEl.getAttribute(_app.post.attributeIds.url);
      const name = postEl.getAttribute(_app.post.attributeIds.name);
      const tags = postEl.getAttribute(_app.post.attributeIds.tags);
      const created = postEl.getAttribute(_app.post.attributeIds.date);
      const type = postEl.getAttribute(_app.post.attributeIds.postType);
      _app.post.set(id, title, domain, url, name, tags, content, created, type, summary);
    }

    window.location.hash = "post";
  }

  function deleteMe(id) {
    if(confirm("Are you sure you want to delete this?")) {
      byId(id).remove(); 
      window.location.hash = "stream";
    }
  }

  function loadPostType(type) {
    // clean the DOM
    let posts = byId(type);
    posts.innerHTML = "";
    
    let filterTextEl = byId(_app.htmlIds.filterText);
    let tagAttribute = filterTextEl.innerHTML ? `[${_app.post.attributeIds.tags}~=${filterTextEl.innerHTML}]` : '';

    let sections = null;    
    if(type === _app.postTypes.photo )
    {
      sections = bySelAll(`section[${_app.post.attributeIds.photo}='true'][${_app.post.attributeIds.date}]${tagAttribute}`); 
    }
    else if (type === "stream")
    {
      sections = bySelAll(`section[${_app.post.attributeIds.type}='${_app.sectionTypes.post}'][${_app.post.attributeIds.date}]${tagAttribute}`);
    } 
    else
    {
      sections = bySelAll(`section[${_app.post.attributeIds.postType}='${type}'][${_app.post.attributeIds.date}]${tagAttribute}`); 
    }

    // get the sections and sort them
    if (sections != null && sections != undefined && sections.length > 0) {
      [].slice.call(sections).sort(function (a, b) {
        return new Date(a.getAttribute(_app.post.attributeIds.date)) >
          new Date(b.getAttribute(_app.post.attributeIds.date))
          ? 1
          : new Date(b.getAttribute(_app.post.attributeIds.date)) >
            a.getAttribute(_app.post.attributeIds.date)
          ? -1
          : 0;
      });
  
      let max = byId(_app.htmlIds.streamCount).value;
      // add them to the DOM
      sections.forEach((section, index) => {
        if(index < max){
          let id = section.getAttribute("id");
          let content = byId(id + "-content");

          if (content != null && content != undefined) {
            let clone = content.cloneNode(true);
            let children = clone.childNodes;
            [].slice.call(children).forEach((child) => posts.append(child));
          }
        }
      });
      
      if(sections.length > max){
        // here we should implement next/prev buttons
      }
      var div = document.createElement('div');
      div.setAttribute('id','streamNavigation');
      var indexLink = document.createElement('a')
      indexLink.setAttribute('href','#');
      indexLink.innerHTML = 'View Index';
      div.append(indexLink);
      posts.append(div);
    }
  }

  let authDisplay = function(show) {
    let authBtns = document.getElementsByClassName("logged-in");
    [].slice.call(authBtns).forEach((btn) => {
      if(show) 
      {
        btn.style.display = "inline-block";
      }
      else
      {
        btn.style.display = null;
      }  
    });
    
    _app.post.hide();
  }
  
  //  --------------------- DOM LOADED ------------
  //  Set up event listeners
  //  ---------------------------------------------
  document.addEventListener("DOMContentLoaded", function () {  
    let id = _app.cleanId();
    
    //  ---------------------- SETUP ----------------
    // Create needed elements if missing
    //  ---------------------------------------------
    if(!byId(_app.htmlIds.postCreated))
    {
      let created = document.createElement("input");
      created.setAttribute("id", _app.htmlIds.postCreated); 
      created.setAttribute("type", "hidden"); 
      byId('post').append(created);
    }
    if(!byId(_app.htmlIds.index)){
      let index = document.createElement("div");
      index.setAttribute("id", _app.htmlIds.index);
      let finalSection = byId("main").lastElementChild;
      finalSection.innerHTML = "";
      finalSection.innerHTML = "<h2>Site Index</h2>";
      finalSection.append(index);
    }
  
    //  ---------------------- INITALIZE ------------
    // Redirect to the stream on load unless this
    // page came from a #page
    //  ---------------------------------------------
    var page = window.location.href.replace(/^https?:\/\//, "");
    if (
      window.location.host === page ||
      window.location.host + "/" === page ||
      window.location.host + "/index.html" === page
    ) {
      window.location.hash = "stream";
    }
    
    if (window.location.hash === "#stream") {
      loadPostType('stream') 
    }
    
    
    let filterRemoveEl = byId(_app.htmlIds.removeFilterText);
    filterRemoveEl.addEventListener("click", function (e) {
      byId(_app.htmlIds.filterText).innerHTML = '';
      dispNone(byId(_app.htmlIds.filter));
      loadPostType(_app.cleanId());
    });
    
  
    //  ------------------- AUTHENTICATED ------------
    //  Check if the user has a PAT and show buttons
    //  Authorization is checked when the Github PAT
    //  is checked for trying to save changes.
    //  ---------------------------------------------
    if (!_app.readonly()) {
      authDisplay(true);
  
      document
        .querySelectorAll(`input[name=${_app.htmlIds.postTypes}]`)
        .forEach((input) =>
          input.addEventListener("click", function (e) {
            // rehide them
            _app.post.hide();
            _app.post.toggleInputs(e.target.value);
          })
        );
  
      // make sure they are hidden on load
      _app.post.hide();
    } else {
      // remove the settings areas
      byId(_app.htmlIds.settingsGeneral).remove();
      byId(_app.htmlIds.settingsIndieWeb).remove();
      byId(_app.htmlIds.githubAutoSaveSetting).remove();
      let authBtns = document.getElementsByClassName("logged-in");
      [].slice.call(authBtns).forEach((btn) => {
        dispNone(btn);
      });
    }
  
    // ----------------------- SPA ENGINE ----------
    //  mostly handled by css, but we do keep
    //  track of the current location.hash
    //  and load/destroy editors based off of it.
    //  ---------------------------------------------
    function locationHashChanged() {
      id = _app.cleanId();
  
      // if they're navigation to a core page ... load it
      if (id === "stream") {
        loadPostType('stream'); 
      }
      if (id === _app.postTypes.note ||
         id === _app.postTypes.reply ||
         id === _app.postTypes.like ||
         id === _app.postTypes.bookmark ||
         id === _app.postTypes.article ||
         id === _app.postTypes.photo) {
        loadPostType(id);
      }
      
      if (id === "post" && !_app.post.getEditPostId()) {
        byId("post-button").innerHTML = "Post it!";
        _app.post.clear();
      }
      
      window.scrollTo(0, 0);
    }
    window.onhashchange = locationHashChanged;
  
    // --------------------- CONFIGURATION ----------
    //  Keep the DOM refreshed with configuration
    //  changes
    // _---------------------------------------------
    bySelAll("input.config").forEach((input) =>
      input.addEventListener("input", function () {
        var value = DOMPurify.sanitize(this.value);
        this.setAttribute("value", value);
  
        if (this.getAttribute("id") === _app.htmlIds.hcardname) {
          byId("hcard_name").innerHTML = value;
        }
        if (this.getAttribute("id") === _app.htmlIds.hcardnote) {
          byId("hcard_note").innerHTML = value;
        }
        if (this.getAttribute("id") === _app.htmlIds.hcardimg) {
          byId("hcard_img").src = value;
        }
        if (this.getAttribute("id") === "configuration_site_name") {
          byId("site_name").innerHTML = value;
        }
        if (this.getAttribute("id") === "configuration_indieauth_email") {
          var element = byId("indieauth-email");
          if (element) {
            if (this.value) {
              element.setAttribute("href", `mailto:${value}`);
              element.innerHTML = "📧 " + value;
            } else {
              element.remove();
            }
          } else {
            if (value) {
              let anchor = document.createElement("a");
              anchor.setAttribute("id", "indieauth-email");
              anchor.setAttribute("rel", "me");
              anchor.setAttribute("href", `mailto:${value}`);
              anchor.style.display = 'block';
              anchor.style.textAlign = 'center';
              anchor.innerHTML = "📧 " + value;
  
              var profile = byId("profile");
              profile.append(anchor);
            }
          }
        }
      })
    );

    // --------------------- EDITOR ------ ----------
    //  Set up the editor
    // _---------------------------------------------
    Panagram.init({
        controls: "defaultControls",
        ctrElement: byId(_app.htmlIds.editorControls),
        outElement: byId(_app.htmlIds.editorOutput),
      });
    
    const editor = byId(_app.htmlIds.editorOutput)
    editor.addEventListener("paste", (e) => {
      e.preventDefault();
      const text = e.clipboardData.getData('text/plain');
      document.execCommand("insertHTML", false, text);
    });

  }); // End DOM load steps
